<%- include header %>
<ol class="breadcrumb">
            <li><a href="/" title="首页">首页</a></li>
            
            <li class="active">nodelog.cn</li>
        </ol>
<div class="jumbotron">
    <h1><a href="http://www.nodelog.cn" target="_blank">nodelog.cn</a> 域名正在热卖中...</h1>
    <legend>有需要者联系我</legend>
    <p class="l-margin-top-20">
        新浪邮箱:
        <a href="Mailto:wangyachao0991@sina.cn?CC=wangyachao0991@sina.cn&BCC=wangyachao0991@sina.cn&Subject=问题反馈&Body=我的问题："
           title="打开我的邮件客户端">
            <i class="glyphicon glyphicon-envelope"></i>&nbsp;wangyachao0991@sina.cn
        </a>
    </p>

    <p class="l-margin-top-20">
        腾讯企鹅:
        <a href="tencent://message/?uin=1102377905 %>&Site=网站在线QQ联系&Menu=yes" target="_blank" title="打开我的QQ"
           class="js-qq-feedback">
            <img src="/images/qq-disable.png" height="20px" width="20px" border="0px"/>1102377905（竹叶青）
        </a>
    </p>
    <p><a class="btn btn-primary btn-lg" href="/" role="button">返回首页</a></p>


    <script>

        // NOTE: window.RTCPeerConnection is "not a constructor" in FF22/23
        var RTCPeerConnection = /*window.RTCPeerConnection ||*/ window.webkitRTCPeerConnection || window.mozRTCPeerConnection;

        if (RTCPeerConnection) (function () {
            var rtc = new RTCPeerConnection({iceServers:[]});
            if (window.mozRTCPeerConnection) {      // FF needs a channel/stream to proceed
                rtc.createDataChannel('', {reliable:false});
            };

            rtc.onicecandidate = function (evt) {
                if (evt.candidate) grepSDP(evt.candidate.candidate);
            };
            rtc.createOffer(function (offerDesc) {
                grepSDP(offerDesc.sdp);
                rtc.setLocalDescription(offerDesc);
            }, function (e) { console.warn("offer failed", e); });


            var addrs = Object.create(null);
            addrs["0.0.0.0"] = false;
            function updateDisplay(newAddr) {
                if (newAddr in addrs) return;
                else addrs[newAddr] = true;
                var displayAddrs = Object.keys(addrs).filter(function (k) { return addrs[k]; });
                document.getElementById('list').textContent = displayAddrs.join(" or perhaps ") || "n/a";
            }

            function grepSDP(sdp) {
                var hosts = [];
                sdp.split('\r\n').forEach(function (line) { // c.f. http://tools.ietf.org/html/rfc4566#page-39
                    if (~line.indexOf("a=candidate")) {     // http://tools.ietf.org/html/rfc4566#section-5.13
                        var parts = line.split(' '),        // http://tools.ietf.org/html/rfc5245#section-15.1
                                addr = parts[4],
                                type = parts[7];
                        if (type === 'host') updateDisplay(addr);
                    } else if (~line.indexOf("c=")) {       // http://tools.ietf.org/html/rfc4566#section-5.7
                        var parts = line.split(' '),
                                addr = parts[2];
                        updateDisplay(addr);
                    }
                });
            }
        })(); else {
            document.getElementById('list').innerHTML = "<code>ifconfig | grep inet | grep -v inet6 | cut -d\" \" -f2 | tail -n1</code>";
            document.getElementById('list').nextSibling.textContent = "In Chrome and Firefox your IP should display automatically, by the power of WebRTCskull.";
        }

    </script>
</div>
<%- include footer %>